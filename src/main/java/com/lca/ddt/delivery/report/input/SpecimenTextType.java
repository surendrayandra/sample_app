//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.05.30 at 03:09:20 PM IST 
//


package com.lca.ddt.delivery.report.input;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for SpecimenTextType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="SpecimenTextType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="FIXATIVEDISCLAIMER"/>
 *     &lt;enumeration value="FORMALIN"/>
 *     &lt;enumeration value="NOTFORMALIN"/>
 *     &lt;enumeration value="TIMEFIX_EXCEEDS_1HR_OR_NP"/>
 *     &lt;enumeration value="HER2_DURFIX_WITHIN_6TO48_HR"/>
 *     &lt;enumeration value="HER2_DURFIX_NOTINTIME_OR_NP"/>
 *     &lt;enumeration value="ERPR_DURFIX_WITHIN6TO72_HR"/>
 *     &lt;enumeration value="ERPR_DURFIX_NOTINTIME_OR_NP"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "SpecimenTextType")
@XmlEnum
public enum SpecimenTextType {

    FIXATIVEDISCLAIMER("FIXATIVEDISCLAIMER"),
    FORMALIN("FORMALIN"),
    NOTFORMALIN("NOTFORMALIN"),
    @XmlEnumValue("TIMEFIX_EXCEEDS_1HR_OR_NP")
    TIMEFIX_EXCEEDS_1_HR_OR_NP("TIMEFIX_EXCEEDS_1HR_OR_NP"),
    @XmlEnumValue("HER2_DURFIX_WITHIN_6TO48_HR")
    HER_2_DURFIX_WITHIN_6_TO_48_HR("HER2_DURFIX_WITHIN_6TO48_HR"),
    @XmlEnumValue("HER2_DURFIX_NOTINTIME_OR_NP")
    HER_2_DURFIX_NOTINTIME_OR_NP("HER2_DURFIX_NOTINTIME_OR_NP"),
    @XmlEnumValue("ERPR_DURFIX_WITHIN6TO72_HR")
    ERPR_DURFIX_WITHIN_6_TO_72_HR("ERPR_DURFIX_WITHIN6TO72_HR"),
    ERPR_DURFIX_NOTINTIME_OR_NP("ERPR_DURFIX_NOTINTIME_OR_NP");
    private final String value;

    SpecimenTextType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static SpecimenTextType fromValue(String v) {
        for (SpecimenTextType c: SpecimenTextType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
